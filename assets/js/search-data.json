{
  
    
        "post0": {
            "title": "ML Models for Protein Studies",
            "content": "Before getting into the actual project, I would like to thank Jahnavi Hunsigida for being a wonderful research partner on the project; and Dr.Sumohana Channappayya of IIT Hyderabad, for giving me an opportunity to work on this project under his mentorship. . The beauty of data science lies in the fact that it can be utilised to solve problems in a wide variety of fields. And, if you do have some domain-specific knowledge , you can find that it opens up a wide variety of options that can be taken to solve the problem at hand. . My problem lies in the field of biology, and involves dealing with protein sequences. It is a well-known fact that we have multitudes of protein sequence data available. The basics of biology will tell you that the activity of any protein is dependent not just on its amino acid sequence, but also factors like the way its backbone is designed; the way it folds in 3-D space; the way proteins units bind together, etc. So, the challenge lies in being able to manipulate only the sequence data – primary structure , in biological jargon - of proteins in order to build models to solve problems in the field. . The work that follows is a continuation of an already published work titled , “A machine learning approach for reliable prediction of amino acid interactions and its application in the directed evolution of enantioselective enzymes”, which deals with using only the sequence data to predict a biological parameter called the enantioselectivity value. . Literature Summary: . The paper discusses a methodology for predicting a property – in this case, the enantioselectivity - of the input protein based on just using its primary sequence. This methodology involves using a Digital Signal Processing Technique called innov’SAR , which is a protein structure independent method. First , the protein sequences are converted into spectrums via amino acid index encoding and Fourier Transform These spectrums, are supposed to capture epistatic interactions between the different mutants. The converted inputs are used to design a ML model , which will in turn predict e-values for each of the inputs. The overall goal is to reduce the time spent in order to study the activity of newly designed proteins. . The authors have already explored and established certain models and parameters for the task at hand. My objective is to try some alternative machine learning models and data manipulations on the same problem and obtain some insights of my own. . The primary steps involved are as follows: . Converting the alphabetical amino-acid sequences into a sequence consisting of their respective amino acid indexes. | Using Fourier Transform to obtain information embedded in the converted sequences. This will serve as one of the inputs, with the other being the non-Fourier transformed sequence. | Using these as input in different Machine Learning models , hoping to capture a relationship between the inputs and the value we are trying to predict- The E-value. | Epistasis: . Before we go into the specifics , I want to talk about an interesting concept in science called “Epistasis”. Epistasis occurs when the mutation at a certain point in the gene is affected by a mutation at another site. As you will all see, the dataset we are dealing with consists of different mutants ( single and multi-point ) of epoxide hydrolase from Aspergillus Niger (ANEH). Hence , the model we design must be able to account for the epistatic interactions that may occur when we have multiple mutant samples. This is especially important when we want to predict the enantioselectivity unknown mutants, which may have multiple mutations at different sites. . Data Modelling: . A very vital step of any Machine Learning project involves converting the raw inputs into a form suitable for interpretation by a ML algorithm. This step is especially crucial, as the representation of the input will majorly impact the performance of the model. . Amino Acid Indexes: . The first step involves converting the alphabetical sequences of the inputs into a numerical form which is suitable for use in a machine learning model. For this purpose, we are going to use amino acid indexes. Amino Acid indexes are numerical quantities we assign to each amino acid based on the physical or chemical characteristic we are dealing with ( AAindex: Amino Acid index database ). In this project, I will be trying a variety of AA indexes and comparing their performance in each modelling scenario. . Machine Learning Models: . It should be obvious that the task at hand requires us to predict a continuous value , making this a regression problem. Keeping this is mind , we will focus on the performance of 2 ML regression models: . Linear Regression – Closed Form . | Support Vector Regression . | Dataset: . Set 1: 1 Wild-Type + 9 single point mutants of ANEH . Set 2: 28 Multi-point mutants of ANEH . The E-values for the mutants were measured in the lab. . This dataset was obtained from the supplementary section of the paper. . Basic Linear Regression . We are going to start things off by using basic linear regression to model the problem. The amino acid index we are choosing is called EIIP. . import pandas as pd import numpy as np import matplotlib.pyplot as plt . dict_eiip = {&#39;A&#39;: 0.0373, &#39;R&#39;: 0.0959, &#39;N&#39;: 0.0036, &#39;D&#39;: 0.1263, &#39;C&#39;: 0.0829, &#39;Q&#39;: 0.0761, &#39;E&#39;: 0.0058, &#39;G&#39;: 0.005, &#39;H&#39;: 0.0242, &#39;I&#39;: 0, &#39;L&#39;: 0, &#39;K&#39;: 0.0371, &#39;M&#39;: 0.0823, &#39;F&#39;: 0.0946, &#39;P&#39;: 0.0198, &#39;S&#39;: 0.0829, &#39;T&#39;: 0.0941, &#39;W&#39;: 0.0548, &#39;Y&#39;: 0.0516, &#39;V&#39;: 0.0057} . def num_convert(x): return [dict_eiip[i] for i in x] . data = pd.read_csv(&quot;ee_train.csv&quot;) . data.head() . Type Sequence EE G . 0 WT | LARLTTMLC | 4 | -0.85 | . 1 1 | FARLTTMLC | 12 | -1.50 | . 2 2 | LNRLTTMLC | 7 | -1.17 | . 3 3 | LASLTTMLC | 4 | -0.85 | . 4 4 | LARYTTMLC | 4 | -0.85 | . As we can see, the Sequence column contains the protein sequences found in the training dataset. The ground truth we are dealing with here is the converted value called Free Energy (G). . Formula: . ΔΔG‡=−RT ln (E) . Where E is the enantioselectivity . data.shape . (10, 4) . x_train = [num_convert(x) for x in data[&quot;Sequence&quot;]] . print(x_train) . [[0, 0.0373, 0.0959, 0, 0.0941, 0.0941, 0.0823, 0, 0.0829], [0.0946, 0.0373, 0.0959, 0, 0.0941, 0.0941, 0.0823, 0, 0.0829], [0, 0.0036, 0.0959, 0, 0.0941, 0.0941, 0.0823, 0, 0.0829], [0, 0.0373, 0.0829, 0, 0.0941, 0.0941, 0.0823, 0, 0.0829], [0, 0.0373, 0.0959, 0.0516, 0.0941, 0.0941, 0.0823, 0, 0.0829], [0, 0.0373, 0.0959, 0, 0.0548, 0.0941, 0.0823, 0, 0.0829], [0, 0.0373, 0.0959, 0, 0.0941, 0.0057, 0.0823, 0, 0.0829], [0, 0.0373, 0.0959, 0, 0.0941, 0.0941, 0.0198, 0, 0.0829], [0, 0.0373, 0.0959, 0, 0.0941, 0.0941, 0.0823, 0.0516, 0.0829], [0, 0.0373, 0.0959, 0, 0.0941, 0.0941, 0.0823, 0, 0.0057]] . type(x_train[0][0]) . int . y_train = data[&quot;G&quot;] print(y_train) . 0 -0.85 1 -1.50 2 -1.17 3 -0.85 4 -0.85 5 -1.50 6 -0.85 7 -1.08 8 -0.85 9 -0.97 Name: G, dtype: float64 . x_train = np.array(x_train) . print(x_train) . [[0. 0.0373 0.0959 0. 0.0941 0.0941 0.0823 0. 0.0829] [0.0946 0.0373 0.0959 0. 0.0941 0.0941 0.0823 0. 0.0829] [0. 0.0036 0.0959 0. 0.0941 0.0941 0.0823 0. 0.0829] [0. 0.0373 0.0829 0. 0.0941 0.0941 0.0823 0. 0.0829] [0. 0.0373 0.0959 0.0516 0.0941 0.0941 0.0823 0. 0.0829] [0. 0.0373 0.0959 0. 0.0548 0.0941 0.0823 0. 0.0829] [0. 0.0373 0.0959 0. 0.0941 0.0057 0.0823 0. 0.0829] [0. 0.0373 0.0959 0. 0.0941 0.0941 0.0198 0. 0.0829] [0. 0.0373 0.0959 0. 0.0941 0.0941 0.0823 0.0516 0.0829] [0. 0.0373 0.0959 0. 0.0941 0.0941 0.0823 0. 0.0057]] . The Regression Model . Ordinary Least Square Regression . from sklearn.linear_model import LinearRegression reg = LinearRegression() . reg.fit(x_train,y_train) . LinearRegression() . demo_1 = &quot;LARLTTPYC&quot; x_trial = num_convert(demo_1) . x_trial = np.array([x_trial]) print(x_trial) . [[0. 0.0373 0.0959 0. 0.0941 0.0941 0.0198 0.0516 0.0829]] . print(reg.predict(x_trial)) . [-1.08] . Now, lets go to the test dataset . data_test = pd.read_csv(&quot;ee_test.csv&quot;) data_test.head() . Sequence G EE . 0 FNSLTTMLC | -1.68 | 16.29 | . 1 LARLTTPYC | -0.87 | 4.24 | . 2 LARLWVMLC | -1.68 | 16.29 | . 3 FNSLTTPYC | -1.84 | 21.25 | . 4 FNSLTTMLV | -1.67 | 16.02 | . data_test.shape . (28, 3) . x_test = [num_convert(x) for x in data_test[&quot;Sequence&quot;]] . x_test = np.array(x_test) . prediction = reg.predict(x_test) . print(prediction) . [-1.82 -1.08 -1.5 -2.05 -1.94 -2.47 -1.82 -1.2 -1.73 -1.08 -1.62 -0.97 -1.5 -2.17 -2.7 -2.05 -2.59 -1.94 -2.47 -1.85 -1.2 -1.73 -1.62 -2.17 -2.82 -2.7 -2.59 -2.82] . y_test = data_test[&quot;G&quot;] print(y_test) . 0 -1.68 1 -0.87 2 -1.68 3 -1.84 4 -1.67 5 -2.19 6 -1.93 7 -0.90 8 -1.30 9 -0.98 10 -1.73 11 -0.89 12 -1.88 13 -1.92 14 -2.15 15 -1.96 16 -2.41 17 -1.85 18 -2.37 19 -1.51 20 -0.92 21 -1.75 22 -1.74 23 -2.57 24 -2.09 25 -2.32 26 -2.73 27 -2.87 Name: G, dtype: float64 . from sklearn.metrics import r2_score r2_score(y_test,prediction) . 0.7308241521828205 . reg.score(x_train,y_train) . 1.0 . from scipy.stats import pearsonr corr, _ = pearsonr(y_test, prediction) print(&#39;Pearsons correlation: %.3f&#39; % corr) . Pearsons correlation: 0.893 . plt.scatter(range(1,29),y_test,c = &quot;blue&quot;) plt.plot(range(1,29),prediction , c=&quot;red&quot;) plt.xlabel(&quot;mutant number&quot;) plt.ylabel(&quot;G - value&quot;) plt.legend([&quot;prediction&quot;,&quot;y_test&quot;]) plt.show . &lt;function matplotlib.pyplot.show(close=None, block=None)&gt; . From just looking at the R2 score, we can probably say that the model does relatively well for the limited number of datapoints we are dealing with. However , the problem we are dealing with is not quite as simple as getting the line of closest fit due to the problem of epistasis. . To calculate epistasis , we need to see if the e-value obtained due to multiple mutations is lower or higher than the theoretical additive value obtained by adding each individual mutation. Higher leads to positive epistasis; lower leads to negative epistasis. Hence, even if the predicted e-value is close to the actual value , there is the aspect of predicting the correct epistatic state. . Now, when it comes to the linear regression model , the predicted values for the multi-mutant test set is an exact match with the theoretical additive e-values. This observation stays the same regardless of the nature of the amino-acid index we use (This will be proved in later sections of the post, where we try other AA indexes). . Now, to verify if the linear regression model is insensitive to the exact values of the indexes, lets try a one-hot encoding model. . Trying a One-hot Model . def seq_convert(x): entry = [] for i in x: entry.append(i) return entry . demo_1 = &quot;LARLTTPYC&quot; seq_convert(demo_1) . [&#39;L&#39;, &#39;A&#39;, &#39;R&#39;, &#39;L&#39;, &#39;T&#39;, &#39;T&#39;, &#39;P&#39;, &#39;Y&#39;, &#39;C&#39;] . letter_vector_train = [seq_convert(x) for x in data[&quot;Sequence&quot;]] . letter_vector_test = [seq_convert(x) for x in data_test[&quot;Sequence&quot;]] . letter_vector = np.append(letter_vector_train,letter_vector_test,axis = 0) print(len(letter_vector)) print(letter_vectorfrom sklearn.preprocessing import OneHotEncoder . enc = OneHotEncoder() enc.fit(letter_vector) . OneHotEncoder() . print(enc.transform(letter_vector).toarray()) one_hot_vector = enc.transform(letter_vector).toarray() . [[0. 1. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0.] [1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0.] [0. 1. 0. 1. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0.] [0. 1. 1. 0. 0. 1. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0.] [0. 1. 1. 0. 1. 0. 0. 1. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0.] [0. 1. 1. 0. 1. 0. 1. 0. 0. 1. 1. 0. 1. 0. 1. 0. 1. 0.] [0. 1. 1. 0. 1. 0. 1. 0. 1. 0. 0. 1. 1. 0. 1. 0. 1. 0.] [0. 1. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 0. 1. 1. 0. 1. 0.] [0. 1. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 0. 1. 1. 0.] [0. 1. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 0. 1.] [1. 0. 0. 1. 0. 1. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0.] [0. 1. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 0. 1. 0. 1. 1. 0.] [0. 1. 1. 0. 1. 0. 1. 0. 0. 1. 0. 1. 1. 0. 1. 0. 1. 0.] [1. 0. 0. 1. 0. 1. 1. 0. 1. 0. 1. 0. 0. 1. 0. 1. 1. 0.] [1. 0. 0. 1. 0. 1. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 0. 1.] [1. 0. 0. 1. 0. 1. 1. 0. 0. 1. 0. 1. 1. 0. 1. 0. 1. 0.] [1. 0. 0. 1. 0. 1. 0. 1. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0.] [0. 1. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 0. 1. 0. 1. 0. 1.] [0. 1. 1. 0. 1. 0. 1. 0. 0. 1. 0. 1. 0. 1. 0. 1. 1. 0.] [0. 1. 1. 0. 1. 0. 0. 1. 1. 0. 1. 0. 0. 1. 0. 1. 1. 0.] [0. 1. 1. 0. 1. 0. 1. 0. 0. 1. 0. 1. 1. 0. 1. 0. 0. 1.] [0. 1. 1. 0. 1. 0. 0. 1. 1. 0. 1. 0. 1. 0. 1. 0. 0. 1.] [0. 1. 1. 0. 1. 0. 0. 1. 0. 1. 0. 1. 1. 0. 1. 0. 1. 0.] [1. 0. 0. 1. 0. 1. 1. 0. 1. 0. 1. 0. 0. 1. 0. 1. 0. 1.] [1. 0. 0. 1. 0. 1. 1. 0. 0. 1. 0. 1. 0. 1. 0. 1. 1. 0.] [1. 0. 0. 1. 0. 1. 0. 1. 1. 0. 1. 0. 0. 1. 0. 1. 1. 0.] [1. 0. 0. 1. 0. 1. 1. 0. 0. 1. 0. 1. 1. 0. 1. 0. 0. 1.] [1. 0. 0. 1. 0. 1. 0. 1. 1. 0. 1. 0. 1. 0. 1. 0. 0. 1.] [1. 0. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 1. 0. 1. 0. 1. 0.] [0. 1. 1. 0. 1. 0. 1. 0. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1.] [0. 1. 1. 0. 1. 0. 0. 1. 1. 0. 1. 0. 0. 1. 0. 1. 0. 1.] [0. 1. 1. 0. 1. 0. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 1. 0.] [0. 1. 1. 0. 1. 0. 0. 1. 0. 1. 0. 1. 1. 0. 1. 0. 0. 1.] [1. 0. 0. 1. 0. 1. 0. 1. 1. 0. 1. 0. 0. 1. 0. 1. 0. 1.] [1. 0. 0. 1. 0. 1. 1. 0. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1.] [1. 0. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 1. 0.] [1. 0. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 1. 0. 1. 0. 0. 1.] [1. 0. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1. 0. 1.]] . one_x_train = one_hot_vector[0:10] one_x_test = one_hot_vector[10:] print(len(one_x_train)) print(len(one_x_test)) . 10 28 . reg = LinearRegression() reg.fit(one_x_train,y_train) . LinearRegression() . reg.score(one_x_train,y_train) . 1.0 . prediction_one = reg.predict(one_x_test) print(prediction_one) . [-1.82 -1.08 -1.5 -2.05 -1.94 -2.47 -1.82 -1.2 -1.73 -1.08 -1.62 -0.97 -1.5 -2.17 -2.7 -2.05 -2.59 -1.94 -2.47 -1.85 -1.2 -1.73 -1.62 -2.17 -2.82 -2.7 -2.59 -2.82] . print(r2_score(y_test,prediction_one)) . 0.7308241521828207 . corr, _ = pearsonr(y_test, prediction_one) print(&#39;Pearsons correlation: %.3f&#39; % corr) . Pearsons correlation: 0.893 . plt.scatter(range(1,29),y_test,c = &quot;blue&quot;) plt.plot(range(1,29),prediction_one , c=&quot;red&quot;) plt.xlabel(&quot;mutant number&quot;) plt.ylabel(&quot;G - value&quot;) plt.legend([&quot;predicted&quot;,&quot;y_test&quot;]) plt.show . &lt;function matplotlib.pyplot.show(close=None, block=None)&gt; . comparision_dict= {&quot;EIIP + LR&quot;:prediction,&quot;One_Hot + LR&quot;:prediction_one} comparision_df = pd.DataFrame(comparision_dict) comparision_df . EIIP + LR One_Hot + LR . 0 -1.82 | -1.82 | . 1 -1.08 | -1.08 | . 2 -1.50 | -1.50 | . 3 -2.05 | -2.05 | . 4 -1.94 | -1.94 | . 5 -2.47 | -2.47 | . 6 -1.82 | -1.82 | . 7 -1.20 | -1.20 | . 8 -1.73 | -1.73 | . 9 -1.08 | -1.08 | . 10 -1.62 | -1.62 | . 11 -0.97 | -0.97 | . 12 -1.50 | -1.50 | . 13 -2.17 | -2.17 | . 14 -2.70 | -2.70 | . 15 -2.05 | -2.05 | . 16 -2.59 | -2.59 | . 17 -1.94 | -1.94 | . 18 -2.47 | -2.47 | . 19 -1.85 | -1.85 | . 20 -1.20 | -1.20 | . 21 -1.73 | -1.73 | . 22 -1.62 | -1.62 | . 23 -2.17 | -2.17 | . 24 -2.82 | -2.82 | . 25 -2.70 | -2.70 | . 26 -2.59 | -2.59 | . 27 -2.82 | -2.82 | . From the above results, we can quite confidently say that for a linear model , the numerical value assigned to each amino acid doesnt really impact the model. Thus, this model doesnt capture epistasis. .",
            "url": "https://crimsonflash27.github.io/blog-101/2022/06/13/Introduction.html",
            "relUrl": "/2022/06/13/Introduction.html",
            "date": " • Jun 13, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://crimsonflash27.github.io/blog-101/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://crimsonflash27.github.io/blog-101/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://crimsonflash27.github.io/blog-101/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://crimsonflash27.github.io/blog-101/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}